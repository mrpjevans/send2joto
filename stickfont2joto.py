#
# stickfont2joto.py
# A script to convert gcode generated by NCPlot StickFont v1.1
# to Joto gcode or JSON for text2joto
#
# (c) 2019 PJ Evans <pj@mkcodesmiths.com>
# MIT License
#
# Absolutely no warranty. Use at your own risk. Bad gcode can
# break a Joto.
#
# Usage: See README
#
import os
import argparse

# Command line
parser = argparse.ArgumentParser(
    description='Convert ncPlot stick font gcode to Joto gcode')
parser.add_argument('-s', '--scale', type=float, default='1',
                    help='Scale')
parser.add_argument('-c', '--char', type=str, default='',
                    help='Character being converted')
parser.add_argument('-g', '--gcode', action="store_true",
                    help='Output Gcode instead of JSON')
parser.add_argument('-u', '--pen-up', type=int, default=70,
                    help='Pen up position (try 70)')
parser.add_argument('-d', '--pen-down', type=int, default=175,
                    help='Pen down position (try 140 upwards)')
parser.add_argument('-x', '--x-offset', type=int, default=50,
                    help='X offset for gcode')
parser.add_argument('-y', '--y-offset', type=int, default=50,
                    help='Y offset for gcode')
parser.add_argument('-f', '--file', type=str, required=True,
                    help='File to read')

args = parser.parse_args()

scale = args.scale
pen_up = args.pen_up
pen_down = args.pen_down
x_offset = args.x_offset
y_offset = args.y_offset
y_offset = args.y_offset
character = args.char
file = args.file

# Read in from file
nc_code = []
with open(file, "r") as f:
    for line in f:
        nc_code.append(line.strip())
if character == "":
    character = os.path.basename(file).split('.')[0]

actions = []

for line in nc_code:
    if line == '':
        continue

    if line[0] == 'G':
        if line.rfind('F') != -1:
            # Pen down
            actions.append(['d'])
        else:
            # Pen up
            actions.append(['u'])

    if line[0] == 'X':

        middle = line.rfind('Y')

        x_abs = float(line[1:middle])
        y_abs = float(line[middle+1:])

        x_pc = int(x_abs * 100) * scale
        y_pc = int(y_abs * 100) * scale

        actions.append(['m', x_pc, y_pc])

if args.gcode:

    # Joto gcode output
    for i in actions:
        if i[0] == 'u':
            print('M106 S%i' % (pen_up))
            print('G4 P60.0')
        elif i[0] == 'd':
            print('M106 S%i' % (pen_down))
            print('G4 P60.0')
        else:
            print('G1 X%.2f Y%5.2f' % (i[1], i[2]))

else:

    # Font definition JSON output
    print('"' + character + '": [')
    for i in range(len(actions)):
        print(actions[i], end="")
        if i < len(actions) - 1:
            print(",")

    print('],')
